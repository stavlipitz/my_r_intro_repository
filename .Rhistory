df |> mutate(task       = ifelse(grepl("ink_naming", condition), "ink_naming", "word_reading"),
congruency = ifelse(grepl("incong", condition), "incongruent", "congruent"),
acc        = ifelse(correct_response == participant_response, 1, 0)) |>
mutate(subject    = as.factor(subject),
block      = as.numeric(block),
trial      = as.numeric(trial),
task       = as.factor(task),
congruency = as.factor(congruency),
acc        = as.numeric(acc),
rt         = as.numeric(acc),
ip.address = NULL,
latitude   = NULL,
longitude  = NULL,
browser_version = NULL,
operating_system = NULL,
screen_resolution = NULL,
device_type = NULL,
user_agent = NULL,
session_id = NULL,
click_rate = NULL,
error_count = NULL
) |>
select(subject,
block,
trial,
task,
congruency,
participant_response,
correct_response,
acc,
rt) |>
print(df)
df = df |> mutate(task       = ifelse(grepl("ink_naming", condition), "ink_naming", "word_reading"),
congruency = ifelse(grepl("incong", condition), "incongruent", "congruent"),
acc        = ifelse(correct_response == participant_response, 1, 0)) |>
mutate(subject    = as.factor(subject),
block      = as.numeric(block),
trial      = as.numeric(trial),
task       = as.factor(task),
congruency = as.factor(congruency),
acc        = as.numeric(acc),
rt         = as.numeric(acc),
ip.address = NULL,
latitude   = NULL,
longitude  = NULL,
browser_version = NULL,
operating_system = NULL,
screen_resolution = NULL,
device_type = NULL,
user_agent = NULL,
session_id = NULL,
click_rate = NULL,
error_count = NULL
)
df = df |> mutate(task       = ifelse(grepl("ink_naming", condition), "ink_naming", "word_reading"),
congruency = ifelse(grepl("incong", condition), "incongruent", "congruent"),
acc        = ifelse(correct_response == participant_response, 1, 0)) |>
mutate(subject    = as.factor(subject),
block      = as.numeric(block),
trial      = as.numeric(trial),
task       = as.factor(task),
congruency = as.factor(congruency),
acc        = as.numeric(acc),
rt         = as.numeric(acc),
ip.address = NULL,
latitude   = NULL,
longitude  = NULL,
browser_version = NULL,
operating_system = NULL,
screen_resolution = NULL,
device_type = NULL,
user_agent = NULL,
session_id = NULL,
click_rate = NULL,
error_count = NULL
) |>
summary(df)
df = df |> mutate(task       = ifelse(grepl("ink_naming", condition), "ink_naming", "word_reading"),
congruency = ifelse(grepl("incong", condition), "incongruent", "congruent"),
acc        = ifelse(correct_response == participant_response, 1, 0))
df = df |> mutate(task       = ifelse(grepl("ink_naming", condition), "ink_naming", "word_reading"),
congruency = ifelse(grepl("incong", condition), "incongruent", "congruent"),
acc        = ifelse(correct_response == participant_response, 1, 0)) |>
mutate(subject    = as.factor(subject),
block      = as.numeric(block),
trial      = as.numeric(trial),
task       = as.factor(task),
congruency = as.factor(congruency),
acc        = as.numeric(acc),
rt         = as.numeric(acc),
ip.address = NULL,
latitude   = NULL,
longitude  = NULL,
browser_version = NULL,
operating_system = NULL,
screen_resolution = NULL,
device_type = NULL,
user_agent = NULL,
session_id = NULL,
click_rate = NULL,
error_count = NULL
)
df = df |> mutate(task       = ifelse(grepl("ink_naming", condition), "ink_naming", "word_reading"),
congruency = ifelse(grepl("incong", condition), "incongruent", "congruent"),
acc        = ifelse(correct_response == participant_response, 1, 0)) |>
mutate(subject    = as.factor(subject),
block      = as.numeric(block),
trial      = as.numeric(trial),
task       = as.factor(task),
congruency = as.factor(congruency),
acc        = as.numeric(acc),
rt         = as.numeric(acc),
ip.address = NULL,
latitude   = NULL,
longitude  = NULL,
browser_version = NULL,
operating_system = NULL,
screen_resolution = NULL,
device_type = NULL,
user_agent = NULL,
session_id = NULL,
click_rate = NULL,
error_count = NULL
) |>
summarise(df)
summary(df)
df = df |> mutate(task       = ifelse(grepl("ink_naming", condition), "ink_naming", "word_reading"),
congruency = ifelse(grepl("incong", condition), "incongruent", "congruent"),
acc        = ifelse(correct_response == participant_response, 1, 0)) |>
mutate(subject    = as.factor(subject),
block      = as.numeric(block),
trial      = as.numeric(trial),
task       = as.factor(task),
congruency = as.factor(congruency),
acc        = as.numeric(acc),
rt         = as.numeric(acc),
correct_response = NULL,
participant_response = NULL,
ip_address = NULL,
latitude   = NULL,
longitude  = NULL,
browser_version = NULL,
operating_system = NULL,
screen_resolution = NULL,
device_type = NULL,
user_agent = NULL,
session_id = NULL,
click_rate = NULL,
error_count = NULL
)
summary(df)
df = df |> mutate(task       = ifelse(grepl("ink_naming", condition), "ink_naming", "word_reading"),
congruency = ifelse(grepl("incong", condition), "incongruent", "congruent"),
acc        = ifelse(correct_response == participant_response, 1, 0)) |>
mutate(subject        = as.factor(subject),
block          = as.numeric(block),
trial          = as.numeric(trial),
task           = as.factor(task),
congruency     = as.factor(congruency),
acc            = as.numeric(acc),
rt             = as.numeric(acc),
ccondition     = NULL,
correct_response = NULL,
participant_response = NULL,
ip_address     = NULL,
latitude       = NULL,
longitude      = NULL,
browser_version = NULL,
operating_system = NULL,
screen_resolution = NULL,
device_type    = NULL,
user_agent     = NULL,
session_id     = NULL,
click_rate     = NULL,
error_count    = NULL
)
summary(df)
df = df |> mutate(task       = ifelse(grepl("ink_naming", condition), "ink_naming", "word_reading"),
congruency = ifelse(grepl("incong", condition), "incongruent", "congruent"),
acc        = ifelse(correct_response == participant_response, 1, 0))
source("~/Docs/אוניברסיטה/תואר שני/היכרות עם R/Saves/Learning R/Stroop Assignment 7/Stroop Assignment 7/Assignment 7.R", echo=TRUE)
View(df)
source("~/Docs/אוניברסיטה/תואר שני/היכרות עם R/Saves/Learning R/Stroop Assignment 7/Stroop Assignment 7/Assignment 7.R", echo=TRUE)
df = df |> mutate(task       = ifelse(grepl("ink_naming", condition), "ink_naming", "word_reading"),
congruency = ifelse(grepl("incong", condition), "incongruent", "congruent"),
acc        = ifelse(correct_response == participant_response, 1, 0)) |>
mutate(subject        = as.factor(subject),
block          = as.numeric(block),
trial          = as.numeric(trial),
task           = as.factor(task),
congruency     = as.factor(congruency),
acc            = as.numeric(acc),
rt             = as.numeric(rt)) |>
select(subject, block, trial, task, congruency, acc, rt)
# Introduction to R Assignment 7
# Stav Lipitz #id 305644676
#### Part 1 raw data creation ----
### binding csv's togther
file_names = dir(".", pattern = "\\.csv$") #save all csv's to this directory
df         = data.frame() #create df to contain all csv's
for (file in file_names) {
temp_data = read.csv(file.path(".", file))
df = rbind(df, temp_data)
} # open each csv in this directory and bind it to the same file
### create task and congruency columns
df = df |> mutate(task       = ifelse(grepl("ink_naming", condition), "ink_naming", "word_reading"),
congruency = ifelse(grepl("incong", condition), "incongruent", "congruent"),
acc        = ifelse(correct_response == participant_response, 1, 0)) |>
mutate(subject        = as.factor(subject),
block          = as.numeric(block),
trial          = as.numeric(trial),
task           = as.factor(task),
congruency     = as.factor(congruency),
acc            = as.numeric(acc),
rt             = as.numeric(rt)) |>
select(subject, block, trial, task, congruency, acc, rt)
summary(df)
source("~/Docs/אוניברסיטה/תואר שני/היכרות עם R/Saves/Learning R/Stroop Assignment 7/Stroop Assignment 7/Assignment 7.R", echo=TRUE)
source("~/Docs/אוניברסיטה/תואר שני/היכרות עם R/Saves/Learning R/Stroop Assignment 7/Stroop Assignment 7/Assignment 7.R", echo=TRUE)
contrasts(df$task)
contrasts(df$congruency)
source("~/Docs/אוניברסיטה/תואר שני/היכרות עם R/Saves/Learning R/Stroop Assignment 7/Stroop Assignment 7/Assignment 7.R", echo=TRUE)
source("~/Docs/אוניברסיטה/תואר שני/היכרות עם R/Saves/Learning R/Stroop Assignment 7/Stroop Assignment 7/Assignment 7.R", echo=TRUE)
unique(df$subject)
length(unique(df$subject))
source("~/Docs/אוניברסיטה/תואר שני/היכרות עם R/Saves/Learning R/Stroop Assignment 7/Stroop Assignment 7/Assignment 7.R", echo=TRUE)
#omit rows with outlier rt's
df |> filter_by(rt>3, rt<3)
source("~/Docs/אוניברסיטה/תואר שני/היכרות עם R/Saves/Learning R/Stroop Assignment 7/Stroop Assignment 7/Assignment 7.R", echo=TRUE)
View(df_filtered)
View(df_filtered)
source("~/Docs/אוניברסיטה/תואר שני/היכרות עם R/Saves/Learning R/Stroop Assignment 7/Stroop Assignment 7/Assignment 7.R", echo=TRUE)
df_filtered = df |>
na.omit(df)    |>
filter(rt < 3000 & rt > 300)
trials_remaining = length(df_filtered$rt)/length(df$rt)
print(trials_remaining)
trials_remaining |> group_by(subject)
group_by(data = trials_remaining, subject)
df_filtered = df |>
na.omit(df)    |>
filter(rt < 3000 & rt > 300)
#calculate % remaining trials after omittion
df_filtered |>
group_by(subject) |>
mutate(trials_remaining = length(df_filtered$rt)/length(df$rt)) |>
summarise(trials_remaining)
df_filtered |>
group_by(subject) |>
mutate(trials_remaining = length(df_filtered$rt)/length(df$rt))
df_filtered |>
group_by(subject) |>
mutate(trials_remaining = length(df_filtered$rt)/length(df$rt)) |>
summarise(mean(trials_remaining)
summarise(mean(trials_remaining)
df_filtered |>
group_by(subject) |>
mutate(trials_remaining = length(df_filtered$rt)/length(df$rt)) |>
summarise(mean(trials_remaining))
df_filtered = df |>
na.omit(df)    |>
filter(rt < 3000 & rt > 300)
#calculate % remaining trials after omittion
df_filtered |>
group_by(subject) |>
summarise(trials_remaining = n()/400)
source("~/Docs/אוניברסיטה/תואר שני/היכרות עם R/Saves/Learning R/Stroop Assignment 7/Stroop Assignment 7/Assignment 7.R", echo=TRUE)
#calculate % remaining trials after omittion
df_filtered |>
group_by(subject) |>
summarise(trials_remaining = n()/400) |>
print() |>
print()
#calculate % remaining trials after omittion
df_filtered |>
group_by(subject) |>
summarise(trials_remaining = n()/400) |>
print() |>
print()
#calculate % remaining trials after omittion
df_filtered |>
group_by(subject) |>
summarise(trials_remaining = n()/400) |>
print(mean(trials_remaining))
#calculate % remaining trials after omittion
df_filtered |>
group_by(subject) |>
summarise(trials_remaining = n()/400) |>
print(mean(trials_remaining))
#calculate % remaining trials after omittion
df_filtered |>
group_by(subject) |>
summarise(trials_remaining = n()/400) |>
print() |>
ungroup() |>
summarise(mean_trials_remainingn = n()/12000)
df_filtered |>
group_by(subject) |>
summarise(trials_remaining = n()/400) |>
print() |>
ungroup() |>
summarise(mean_trials_remainingn = n()/12000) |>
print()
df_filtered |>
group_by(subject) |>
summarise(trials_remaining = n()/400) |>
print() |>
ungroup() |>
summarise(mean_trials_remainingn = n(df_filtered)/12000) |>
print()
#calculate % remaining trials after omittion
df_filtered |>
group_by(subject) |>
summarise(trials_remaining = n()/400) |>
print() |>
ungroup() |>
summarise(mean_trials_remainingn = n()/12000) |>
print()
df_filtered |>
group_by(subject) |>
summarise(trials_remaining = n()/400) |>
print() |>
ungroup() |>
summarise(mean_trials_remainingn = n()/n(df)) |>
print()
df_filtered |>
group_by(subject) |>
summarise(trials_remaining = n()/400) |>
print() |>
ungroup() |>
summarise(mean_trials_remaining = n()/n(df)) |>
print()
group_vars(df_filtered)
df_filtered |>
group_by(subject) |>
summarise(trials_remaining = n()/400) |>
print() |>
ungroup() |>
summarise(mean_trials_remaining = n()/12000)
df_filtered |>
group_by(subject) |>
summarise(trials_remaining = n()/400) |>
print() |>
ungroup() |>
summarise(mean_trials_remaining = n(df_filtered)/12000)
df_filtered |>
group_by(subject) |>
summarise(trials_remaining = n()/400) |>
print()
group_vars(df_filtered)
group_vars(df_filtered)
#calculate % remaining trials after omittion
df_filtered |>
group_by(subject) |>
summarise(trials_remaining = n()/400) |>
print(n=inf)
#calculate % remaining trials after omittion
df_filtered |>
group_by(subject) |>
summarise(trials_remaining = n()/400) |>
print()
#calculate % remaining trials after omittion
df_filtered |>
group_by(subject) |>
summarise(trials_remaining = n()/400) |>
print() |>
summarise(mean_remaining_trial_rate = mean(trials_remaining))
#calculate % remaining trials after omittion
df_filtered |>
group_by(subject) |>
summarise(trials_remaining = n()/400) |>
print() |>
summarise(mean_remaining_trial_rate = mean(trials_remaining),
sd = sd(trials_remaining))
source("~/Docs/אוניברסיטה/תואר שני/היכרות עם R/Saves/Learning R/Stroop Assignment 7/Stroop Assignment 7/Assignment 7.R", echo=TRUE)
#### Part 3 Descriptives ----
df_filtered |>
group_by(congruency, task) |>
summarise(mean_rt = mean(rt),
mean_acc = mean(acc))
vars_group(df_filtered)
group_vars(df_filtered)
source("~/Docs/אוניברסיטה/תואר שני/היכרות עם R/Saves/Learning R/Stroop Assignment 7/Stroop Assignment 7/Assignment 7.R", echo=TRUE)
#### Part 3 Descriptives ----
df_summarised = df_filtered |>
group_by(congruency, task) |>
summarise(mean_rt = mean(rt),
sd_rt = sd(rt),
mean_acc = mean(acc),
sd_acc = sd(acc))
#### Part 3 Descriptives ----
df_summarised = df_filtered |>
group_by(congruency, task) |>
summarise(mean_rt = mean(rt),
sd_rt = sd(rt),
mean_acc = mean(acc),
sd_acc = sd(acc)) |>
print()
### open ggplot
library(ggplot2)
ggplot(data = df_summarised, mapping = aes(x = congruency, y = acc, color = task)) +
geom_point(size = 3,
position = position_dodge(0.5)) +
geom_errorbar(mapping = aes(ymin = mean_acc - sd_acc,
ymax = mean_acc + sd_acc),
width = 0.2,
position = position_dodge(0.5)) +
geom_jitter(data = df_filtered, mapping = aes(y = acc, x = congruency, color = task),
position = position_jitter(width = 0.2, height = 0),
size = 1,
alpha = 0.3) +
ylab("Accuracy") +
xlab("Color-Word congruency")
source("~/Docs/אוניברסיטה/תואר שני/היכרות עם R/Saves/Learning R/Stroop Assignment 7/Stroop Assignment 7/Assignment 7.R", echo=TRUE)
source("~/Docs/אוניברסיטה/תואר שני/היכרות עם R/Saves/Learning R/Stroop Assignment 7/Stroop Assignment 7/Assignment 7.R", echo=TRUE)
source("~/Docs/אוניברסיטה/תואר שני/היכרות עם R/Saves/Learning R/Stroop Assignment 7/Stroop Assignment 7/Assignment 7.R", echo=TRUE)
ggplot(data = df_summarised, mapping = aes(x = congruency, y = mean_acc, color = task)) +
geom_point(size = 3,
position = position_dodge(0.5)) +
geom_errorbar(mapping = aes(ymin = mean_acc - sd_acc,
ymax = mean_acc + sd_acc),
width = 0.2,
position = position_dodge(0.5)) +
geom_jitter(data = df_filtered, mapping = aes(y = acc, x = congruency, color = task),
position = position_jitter(width = 0.3, height = 0),
size = 1,
alpha = 0.3) +
ylab("Accuracy") +
xlab("Color-Word congruency")
ggplot(data = df_summarised, mapping = aes(x = congruency, y = mean_acc, color = task)) +
geom_histogram(binwidth = 5) +
geom_errorbar(mapping = aes(ymin = mean_acc - sd_acc,
ymax = mean_acc + sd_acc),
width = 0.2,
position = position_dodge(0.5))ylab("Accuracy") +
ggplot(data = df_summarised, mapping = aes(x = congruency, y = mean_acc, color = task)) +
geom_histogram(binwidth = 5) +
geom_errorbar(mapping = aes(ymin = mean_acc - sd_acc,
ymax = mean_acc + sd_acc),
width = 0.2,
position = position_dodge(0.5)) +
ylab("Accuracy") +
xlab("Color-Word congruency") +
theme_classic()
ggplot(data = df_summarised, mapping = aes(x = congruency, y = mean_acc, color = task)) +
geom_bar() +
geom_errorbar(mapping = aes(ymin = mean_acc - sd_acc,
ymax = mean_acc + sd_acc),
width = 0.2,
position = position_dodge(0.5)) +
ylab("Accuracy") +
xlab("Color-Word congruency") +
theme_classic()
ggplot(data = df_summarised, mapping = aes(x = congruency, y = mean_acc, color = task)) +
geom_bar(width = 5) +
geom_errorbar(mapping = aes(ymin = mean_acc - sd_acc,
ymax = mean_acc + sd_acc),
width = 0.2,
position = position_dodge(0.5)) +
ylab("Accuracy") +
xlab("Color-Word congruency") +
theme_classic()
ggplot(data = df_summarised, mapping = aes(x = congruency, y = mean_acc, color = task)) +
geom_point(size = 3,
position = position_dodge(0.5)) +
geom_errorbar(mapping = aes(ymin = mean_acc - sd_acc,
ymax = mean_acc + sd_acc),
width = 0.2,
position = position_dodge(0.5)) +
ylab("Accuracy") +
xlab("Color-Word congruency") +
theme_classic
ggplot(data = df_summarised, mapping = aes(x = congruency, y = mean_acc, color = task)) +
geom_point(size = 3,
position = position_dodge(0.5)) +
geom_errorbar(mapping = aes(ymin = mean_acc - sd_acc,
ymax = mean_acc + sd_acc),
width = 0.2,
position = position_dodge(0.5)) +
ylab("Accuracy") +
xlab("Color-Word congruency")
View(df_summarised)
ggplot(data = df_filtered, mapping = aes(x = congruency, y = mean_acc, color = task)) +
geom_histogram(binwidth = 5)
ggplot(data = df_filtered, mapping = aes(x = congruency, y = acc, color = task)) +
geom_histogram(binwidth = 5)
ggplot(data = df_filtered, mapping = aes(x = congruency, y = acc, fill = task)) +
geom_histogram(binwidth = 5)
source("~/Docs/אוניברסיטה/תואר שני/היכרות עם R/Saves/Learning R/Stroop Assignment 7/Stroop Assignment 7/Assignment 7.R", echo=TRUE)
source("~/Docs/אוניברסיטה/תואר שני/היכרות עם R/Saves/Learning R/Stroop Assignment 7/Stroop Assignment 7/Assignment 7.R", echo=TRUE)
source("~/Docs/אוניברסיטה/תואר שני/היכרות עם R/Saves/Learning R/Stroop Assignment 7/Stroop Assignment 7/Assignment 7.R", echo=TRUE)
#ggplot for accuracy
ggplot(data = df_filtered, mapping = aes(x = acc, fill = congruency)) +
geom_histogram(binwidth = 0.05, color = "black", alpha = 0.7, position = "identity") +
facet_grid(task ~ congruency) +  # חלוקה גם לפי task וגם לפי congruency
labs(
title = "Histogram of Accuracy (acc)",
x = "Accuracy",
y = "Count"
) +
theme_classic()
ggplot(data = df_summarised, mapping = aes(x = congruency, y = mean_acc, fill = task)) +
geom_col(position = position_dodge(0.7), color = "black") +  # יצירת עמודות עם הפרדה בין task
geom_errorbar(aes(ymin = mean_acc - sd_acc, ymax = mean_acc + sd_acc),
width = 0.2, position = position_dodge(0.7)) +  # הוספת פסי שגיאה
labs(
title = "Mean Accuracy by Task and Congruency",
x = "Congruency",
y = "Mean Accuracy"
) +
theme_classic()
source("~/Docs/אוניברסיטה/תואר שני/היכרות עם R/Saves/Learning R/Stroop Assignment 7/Stroop Assignment 7/Assignment 7.R", echo=TRUE)
